#!/bin/bash


taskid=$(uuidgen)

# Execute from the topology directory
cd "$(dirname "$0")/topology"

log_dir=logs/$(date +"%F-%H%M%S")
mkdir -p $log_dir

# Prevent systemd from using pager (breaks automation)
export SYSTEMD_PAGER=cat

# Display executed commands 
set -x

collect_log() {
    # get PID from task UUID
    pid=$(journalctl -o short-iso --no-hostname -t $1 | grep $taskid | head -n 1 | cut -d "[" -f2 | cut -d "]" -f1)
    journalctl -o short-iso --no-hostname -t $1 _PID=$pid > $log_dir/$1.log
}


main() {
    echo "<6>$taskid"

    vagrant destroy
    if [ $? -ne 0 ]; then
        # If previous test run didn't end properly in time, kill it
        pkill -9 bin/vagrant
        systemctl restart libvirtd
        vagrant destroy
    fi

    # TODO Fix this ugly hack and do it properly when migrating scripts to Python
    # Use Vagrantfile for build
    cp Vagrantfile.build Vagrantfile

    # Download new vagrant box if needed
    ../scripts/download-box
    if [ $? -ne 0 ]; then
        echo "<3>Box download failed"
        exit 1
    fi

    # TODO Handle timeout properly and gracefully; attempt retry?
    timeout $((10*60)) vagrant up --parallel
    if [ $? -ne 0 ]; then
        echo "<3>Provisioning (vagrant up) failed (timed out?)"
        exit 1
    fi

    ../scripts/fix-keys-permissions
    timeout $((10*60)) ansible-playbook -e git_pr=$1 -i hosts.build ../ansible/build.yml
    if [ $? -ne 0 ]; then
        echo "<3>Build failed (timed out?)"
        exit 1
    fi

    vagrant destroy

    # Collect journal from this run
    collect_log ipaci-build

    # Collect logs from build dir
    cp build/*.log $log_dir/

    # Compress the logs to save storage space
    find $log_dir -type f ! -name '*.gz' -exec gzip "{}" \;

    # Move logs to long term storage
    # TODO Upload to remote storage
    mkdir -p ../logs
    mv $log_dir ../logs/
}

main "$@" | systemd-cat -t 'ipaci-build' -p debug
