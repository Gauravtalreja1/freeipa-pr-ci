#!/bin/bash

taskid=$(uuidgen)

# Execute from the topology directory
cd "$(dirname "$0")/topology"

log_dir=logs/$(date +"%F-%H%M%S")
mkdir -p ../$log_dir

# Prevent systemd from using pager (breaks automation)
export SYSTEMD_PAGER=cat

# Display executed commands 
set -x

collect_log() {
    # get PID from task UUID
    pid=$(journalctl -o short-iso --no-hostname -t $1 | grep $taskid | head -n 1 | cut -d "[" -f2 | cut -d "]" -f1)
    journalctl -o short-iso --no-hostname -t $1 _PID=$pid > ../$log_dir/$1.log
}


main() {
    echo "<6>$taskid"

    vagrant destroy
    if [ $? -ne 0 ]; then
        # If previous test run didn't end properly in time, kill it
        pkill -9 bin/vagrant
        systemctl restart libvirtd
        vagrant destroy
    fi

    # Download new vagrant box if needed
    ../scripts/download-box
    if [ $? -ne 0 ]; then
        echo "<3>Box download failed"
        exit 1
    fi

    # TODO Handle timeout properly and gracefully; attempt retry?
    timeout $((15*60)) vagrant up --parallel
    if [ $? -ne 0 ]; then
        echo "<3>Provisioning timed out"
        exit 1
    fi

    # Execute tests
    vagrant ssh -c "echo $taskid; IPATEST_YAML_CONFIG=/vagrant/topology/ipa-test-config.yaml ipa-run-tests $1 --verbose --logging-level=debug --logfile-dir=/vagrant/$log_dir" | systemd-cat -t 'ipaci-run' -p debug

    vagrant destroy

    # Collect journal from this run
    collect_log ipaci-run
    collect_log ipaci-provision 

    # Compress the logs to save storage space
    find ../$log_dir -type f ! -name '*.gz' -exec gzip "{}" \;
}

main | systemd-cat -t 'ipaci-provision' -p debug

